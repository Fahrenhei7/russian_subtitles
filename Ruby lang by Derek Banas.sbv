0:00:00.000,0:00:02.780
Привет, интернет!
И добро пожаловать в обучающее видео по Ruby!

0:00:02.780,0:00:09.480
В этом видео я затрону примерно 95% языка программирования Ruby, весь основной синтаксис.

0:00:09.760,0:00:13.300
Ruby - это динамический, интерпретируемый, объектно - ориентированный язык программирования,

0:00:13.300,0:00:17.740
в котором всё - объект и все объекты могут быть изменены (переписаны).

0:00:17.740,0:00:20.540
Ruby - один из наилегчайших языков для чтения и изучения,

0:00:20.540,0:00:24.300
а с Rails он может быть лучшим вариантом для веб - разработки.

0:00:24.300,0:00:31.260
В описании к этому видео вы найдете ссылки на разбор всех частей Ruby, о которых я расскажу,

0:00:31.260,0:00:37.240
а так же ссылку на весь код, который насыщен комментариями и легок для прочтения.

0:00:37.240,0:00:39.160
Хватит разговоров, давайте писать код!

0:00:39.940,0:00:43.420
В левой части экрана у меня обычный редактор текста - Sublime text,

0:00:44.120,0:00:49.260
я пробую различный цветовые схемы, если вам нравится - напишите в комментарии.

0:00:49.260,0:00:53.320
А в правой части у меня терминал или коммандная строка, если вы на Windows.

0:00:53.840,0:00:56.520
Я не буду показывать как установить руби, это очень просто:

0:00:56.520,0:01:01.780
зайдите на сайт ruby-lang.org в раздел "установка"

0:01:01.780,0:01:08.340
и вы найдете всю необходимую информацию и установщики, для различных операционных систем.

0:01:08.340,0:01:13.300
В первой части я кратко расскажу про разные вещи,

0:01:13.300,0:01:17.600
Если вы хотите написать комментарий, поставьте символ "решетки" - это комментарий.

0:01:17.600,0:01:20.580
Я покажу другие типы комментариев чуть позже

0:01:20.580,0:01:26.680
Если вы хотите вывести что - то на экране - очень просто. Например напишем "Enter a Value: " ("введите значение")

0:01:26.680,0:01:31.520
Названия переменных могут начинаться с букв нижнего регистра или символа нижнего подчеркивания

0:01:31.520,0:01:39.340
обычно с букв нижнего регистра, и конечно после подчеркивания или буквы вы можете использовать использовать цифры в названиях переменных.

0:01:39.340,0:01:48.080
Давайте создадим переменную. Обычно при названии переменных используются тире или нижние подчеркивания между различными словами в вашем названии.

0:01:48.080,0:01:57.680
Теперь, если я хочу получить информацию от пользователя, я просто печатаю "gets", далее, я хочу преобразовать это из "строки" в "число", я пишу "to_i".

0:01:57.680,0:02:02.880
Потом просим написать другое значение

0:02:02.880,0:02:08.760
Используем "gets" ещё раз. Очень важно преобразовать это в "число".

0:02:08.760,0:02:11.860
Ещё один вариант, как мы может вывести информацию - использовать "puts".

0:02:11.860,0:02:18.120
И разница между "print" и "puts" в том, что первое не создаст новую линию после того, как выведет ваш текст

0:02:18.120,0:02:20.460
а "puts" - создаст новую линию.

0:02:20.460,0:02:28.440
Скажем, мы хотим вывести переменную, нам нужно конвертировать её обратно в "строку", просто пишем "to_s".

0:02:28.440,0:02:39.980
Если вы хотите соединить или скомбинировать "строки", просто напишите знак "+", я напишу " + " и второе число, потом " = "

0:02:39.980,0:02:44.020
вы можете видеть как я  перехожу на следующую строку,

0:02:44.020,0:02:47.320
и конечно вам не нужны точки с запятой после каждого объявления (метода, переменной и т.д. прим. пер)

0:02:47.320,0:02:53.380
Если нужно что - то вычислить напишем так (см. код) преобразуем это в "строку".

0:02:53.380,0:02:57.740
Далее идем сюда, и вы можете видеть имя моего файла - rubyOrNotRuby.

0:02:57.740,0:03:04.820
Я просто напишу ruby что - бы выполнить его, вы можете видеть расширение ".rb", такое расширение у всех файлов Ruby.

0:03:04.820,0:03:11.360
Если мы исполним файл, вы можете видеть "Введите значение: "  я напишу 2, "Введите другое значение: " допустим 3, и вы можете видеть ответ появился на экране.

0:03:11.360,0:03:20.400
Вы видите пять основных арифметических операторов (знаков). Мы конечно же можем складывать, вычитать, умножать, делить, находить остаток от деления.

0:03:20.400,0:03:24.400
Посмотрите сюда, все они тут, ответы показаны на экране.

0:03:24.400,0:03:36.640
Целые числа, или "фиксированные" числа (как типы данных) могут хранить очень большие числа, которые даже не помястятся в окне редактора. Они очень даже большие.

0:03:36.640,0:03:42.400
Ruby использует другой способ хранения чисел, что позволяет вам хранить такие большие числа.

0:03:42.400,0:03:53.520
Давайте создадим ещё одно число, что - бы показать пример точности чисел с плавающей точкой, скажем это будет "1.000"

0:03:53.520,0:04:02.720
Создадим ещё одно не целое число, и вещь, которую вы должны запомнить об этом - всегда должно быть число перед точкой, когда мы определяем его.

0:04:02.720,0:04:18.320
Напишем ... , преобразуем в "строку" и давайте в этот раз произведем вычитание ... теперь это преобразуем в "строку", ... и снова в "строку". Сохраним.

0:04:18.320,0:04:24.720
Когда мы вычислим мы видим, что все довольно точно, до самого конца, где мы видим цифру 9.

0:04:24.720,0:04:30.480
Обычно в числах с плавающей точкой вы можете верить, что первые 14 цифр будут точными, чего вполне достаточно.

0:04:30.480,0:04:39.520
Давайте создадим большое число, произведем немного вычислений... не забывайте ставить ноль перед точкой,

0:04:39.520,0:04:54.880
Помните про 14 точных чисел, тут не очень точно, как и в любом другом языке программирования, операции с числами с плавающей точкой не точные, вам следует избегать их.

0:04:54.880,0:05:06.380
Ранее я сказал что всё в руби - объект, давайте убедимся в этом, напишем ".class", он веренет нам класс того, что ему предшествует,

0:05:06.380,0:05:13.580
напишем число с плавающей точкой и .class, и конечно мы можем проверить "строку".

0:05:13.580,0:05:19.040
Когда мы выполним это, увидем "Fixnum", "Float" и "String".

0:05:19.040,0:05:24.040
Мы увидем ещё примеры что такое объект в руби. Вообще всё.

0:05:24.120,0:05:30.720
Константы пишутся заглавными буквами. Вот так (см. код)

0:05:30.720,0:05:37.640
Однако мы должны помнить, когда мы назвали переменную константой, мы не подразумевали её изменение.

0:05:37.640,0:05:45.280
Если мы изменим значение константы мы получим ошибку, но она всё таки изменится.

0:05:45.280,0:05:51.000
Как вы можете видеть здесь - предупреждение, однако значение константы изменилось.

0:05:51.000,0:05:57.353
Сейчас я покажу вам одну более продвинутую штуку. Допустим мы хотим создать объект - файл. Это довольно просто сделать.

0:05:57.353,0:06:04.848
Создаём переменную (см.код), будем использовать объект - File. Я расскажу о нем более подробно в конце видео.

0:06:04.848,0:06:10.995
Скажем, у нас есть файл yourSum, в который мы хотим что - то записать. Давайте дадим ему расширение ".out".

0:06:10.995,0:06:15.885
И, скажем, что мы хотим записать (w - write) в него что-то. Это создаст файл, если его ещё не существует.

0:06:15.885,0:06:27.254
Используем команду, что-бы поместить текст в файл. Вы можете помещать переменные, практически все, что захотите. Но вам нужно преобразовать это в "строку".

0:06:27.254,0:06:31.536
Мы должны написать команду ".close", что-бы закрыть файл после того, как загрузили его.

0:06:31.536,0:06:41.953
Теперь если мы хотим получить информацию из файла, мы снова используем объект - File, пишем, что нужно прочесть и откуда,

0:06:41.953,0:06:48.284
наш файл называется "youSum.out", выводим информацию на экран, как вы можете видеть вот так просто.

0:06:48.284,0:06:56.031
Как вы можете видеть, вот наша информация из файла, который мы создали, заполнили, закрыли, открыли, прочли его и сейчас вывели информацию на экран.

0:06:56.031,0:07:12.604
Если вам нужна команда, что-бы загрузить и исполнить код из другого файла руби (.rb) то делаем так: (см. код) создадим новый файл rubyOrNotRuby2 

0:07:12.604,0:07:18.304
Напишем "Hello From rubyOrNotRuby2", сохраним,

0:07:18.304,0:07:26.465
Вернемся назад, сохраним и выполним -  увидем как просто можно исполнить код из других файлов. 

0:07:26.465,0:07:38.051
А сейчас давайте посмотрим на условные операторы. И ещё одна вещь, которую стоит запомнить - как писать многострочные комментарии. (см. код)

0:07:38.051,0:07:42.462
Это немного странная реализация многострочных комментариев но это то, что есть в руби.

0:07:42.462,0:07:44.376
Теперь посмотрим на условные операторы.

0:07:44.376,0:07:57.318
Допустим у нас есть переменная age, дадим ей значение 12. Мы можем использовать оператор if (см. код). Если age больше либо равно 5,

0:07:57.318,0:08:04.721
мы так же можем использовать логические операторы: например И (&&) или НЕ( ! ) . Напишем age меньше либо равно 6,

0:08:04.721,0:08:08.828
теперь мы можем писать ниже. Нам не нужны фигурные скобки, которые вы могли использовать раньше (имеется ввиду в других языках)

0:08:08.828,0:08:12.771
Например напишем "You're in Kindergarten" (вы в детском саду)

0:08:12.771,0:08:27.386
Далее мы можем написать (см. код) elsif age больше либо равно 7 И age меньше либо равно 13, и тогда вывести другую информацию. "Ты в средней школе"

0:08:27.386,0:08:33.002
Одна важная вещь - мы можем писать на нескольких строках. Напишем ещё "Yeah"

0:08:33.002,0:08:36.995
Если ничего из этого не подходит, напишем else - "Stay Home" (оставайся дома)

0:08:36.995,0:08:41.875
Очень важно, чтобы ваш условный оператор if/else заканчивался словом end.

0:08:41.875,0:08:45.133
Выполним код и увидем, "Вы в средней школе" и "Yeah" отобразились на экране.

0:08:45.133,0:08:52.586
Так же важно знать, что есть несколько различных операторов сравнения:

0:08:52.586,0:08:55.692
равно ( == ), не равно( != ), меньше ( < ), больше ( > ) 

0:08:55.692,0:08:59.152
меньше либо равно ( <= ), больше либо равно ( >= )

0:08:59.152,0:09:07.365
А так же логические операторы, которые можно использовать для сочетаний различных сравнений:

0:09:07.365,0:09:16.363
И ( && ), ИЛИ ( || ), НЕ ( ! ), вы так же можете писать просто and, or, not

0:09:16.363,0:09:39.000
Продемонстрирую как это работает. Например у нас есть ПРАВДА И( && ) ЛОЖЬ. Сделаем то же самое для других операторов. тут ИЛИ( || ), тут НЕ ( ! ), которое вернет противоположность. 

0:09:39.000,0:09:42.038
И тут вы можете видеть как работают логические операторы.

0:09:42.038,0:09:56.856
Есть ещё один оператор сравнения, доступный для вас. К примеру мы хотим сделать такое сравнение (см. код) 

0:09:56.856,0:10:06.836
Мы получим 0, если оба значения равны, единицу ( 1 ), если первый операнд больше второго, и отрицательную единицу ( -1 ), если первый меньше.

0:10:06.836,0:10:15.397
Давайте выполнима эту операцию, посмотрим, как она работает, вы можете видеть, что мы получили отрицательную единицу, потому что первое число меньше второго. 

0:10:15.397,0:10:19.497
Теперь быстро пройдемся по остальным операторам, для полноты картины.

0:10:19.497,0:10:22.829
unless - ещё один оператор сравнения,

0:10:22.829,0:10:32.112
 давайте напишем unless age больше чем 4. 
- "Не идти в школу",
 в противном случае 
- "Идти в школу"

0:10:32.112,0:10:34.086
ещё раз напишем end

0:10:34.086,0:10:41.929
И вы можете видеть "Идти в школу" появилось. Потому что это ("не идти в школу") выполнится только если age меньше 4.

0:10:41.929,0:10:46.387
И это ещё не все. Есть ещё куча различных методов сравнения в руби.

0:10:46.387,0:10:50.923
Вы так же можете ставить условные операторы после метода, который что-то возвращает

0:10:50.923,0:10:58.800
Например напишем "Вы молод", и это выполнится если age меньше чем 30. Вы можете видеть, как это работает.

0:10:58.800,0:11:01.972
Ещё один способ сравнивать - использовать оператор "case"

0:11:01.972,0:11:12.745
Напишем print "Введите приветствие : ", далее получим приветствие от пользователя. Напишем chomp, если мы хотим удалить переход на новую линию

0:11:12.745,0:11:19.415
которая создается при вводе. Потому что человек вводит что-то а потом нажимает Enter. Метод chomp позволяет нам обходить это.

0:11:19.415,0:11:22.323
Далее создаем оператор "case" (см. код)

0:11:22.323,0:11:31.532
И теперь пишем - "when" (когда) "French" (мы так же можем писать несколько значений, например для маленьких и заглавных букв)

0:11:31.532,0:11:34.336
тогда мы скажем Bojour

0:11:34.336,0:11:39.102
Ещё раз, когда greeting равно "Spanish" или "spanish"

0:11:39.102,0:11:41.065
Мы скажем "Hola"

0:11:41.065,0:11:44.932
И тут должны быть exit, а не end. Теперь все отлично.

0:11:44.932,0:11:54.450
В конце концов мы напишем else, это определит стандартное значение, давайте напишем тут "English", и напишем "Hello"

0:11:54.450,0:11:57.859
а тут "end" - это конец выражения "case"

0:11:57.859,0:12:05.519
Выполним, оставим поле пустым и программа ответит "Hello", напишем "Spanish" и получим "Hola".

0:12:05.519,0:12:11.245
Мы можем удалить отсюда "English" и получим абсолютно такой же результат.

0:12:12.410,0:12:15.878
Ещё одно выражение, которое мы можем использовать - называется тернарная условная операция.

0:12:15.878,0:12:37.720
Она вернет различные значения в зависимости от условия. Далее - см. код. Он вернет "Old", если значение верно, и "Young" если не верно. Вы можете видеть в консоле "Young".

0:12:37.853,0:12:39.476
Давайте рассмотрим циклы.

0:12:39.476,0:12:54.573
Посмотрим на первый цикл. Создадим переменную, присвоим ей значение 1, далее просто напишем "loop do". Далее напишем x+= 1, что является сокращением для x = x + 1

0:12:54.573,0:12:57.392
эти выражения абсолютно одинаковые.

0:12:57.392,0:13:00.830
И вы конечно можете писать комментарии прямо тут, в этом же выражении.

0:13:00.830,0:13:06.158
Скажем, что мы хотим выводить на экран только четные числа.

0:13:06.158,0:13:12.651
Напишем "next" unless (если не) остаток от деления x на 2 равен 0.

0:13:12.651,0:13:17.772
next отправит нас прямо в начало цикла и продолжит исполнять цикл.

0:13:17.772,0:13:21.713
В противном случае, если у нас четное число, давайте выведем его на экран

0:13:21.713,0:13:34.744
теперь используем "break", что должно прекратить итерации цикла, "если x больше или равно 10". Это остановит наш цикл. В конце мы так же должны написать "end" и делать это ещё много раз.

0:13:34.744,0:13:38.153
Если мы исполним это, то увидем 2, 4, 6, 8 и 10. 

0:13:38.153,0:13:47.731
Смотрим на код. На строке 4 будет добавлено значение к переменной, определенной на строке 1. (это будет 2). Далее 2 будет поделено на 2 - остаток 0, next не будет исполнено, далее это значение выводится на экран.

0:13:47.731,0:13:53.604
Дальше проверка 2 >= 10 - вернет false, а значит break не будет исполнено, следовательно цикл повторится заново.

0:13:53.604,0:14:06.074
На строке 4 мы теперь получаем значение 3 (2 + 1), последует проверка остаток от деления 3 на 2 равен 1, следовательно будет исполнено next, что вернет нас в начало цикла и не затронет puts.

0:14:06.074,0:14:19.002
В следующий раз на 4 строке мы получаем значение 4 (3 + 1), и все будет продолжаться, пока break не сработает (в случае если x >= 10). После этого будет выполнен код, который расположен под циклом.

0:14:19.002,0:14:34.188
Теперь создадим ещё одну переменную, что - бы посмотреть как работают циклы "while" в руби. Присвоим значение 1. Далее напишем while y <= 10, далее найдем инкремент от y

0:14:34.188,0:14:42.009
далее делаем то же самое, что и в прошлый раз, пишем next unless (y % 2) == 0

0:14:42.009,0:14:57.077
выводим на экран значение"y", если оно четное, так же пишем break в цикле, и если "y" больше либо равно 10 мы вылетаем из цикла. Но это условие уже дублируется на строке 3, break нам не нужен.

0:14:57.077,0:14:59.438
Так же пишем "end"

0:14:59.438,0:15:03.408
Если мы исполним код, то так же увидим 2, 4, 6, 8, 10

0:15:03.408,0:15:14.255
Есть ещё много способов создать цикл. Давайте объявим ещё одну переменную. И в этот раз мы рассмотрим цикл "until" 

0:15:14.255,0:15:20.306
он будет выполнять код, до того момента, как условие станет возвращать true. Противоположность циклу while

0:15:20.306,0:15:44.774
Используем его. (см.код) находим инкремент значения переменной, так же пишем next если число не четное, в противном случае выводим его на экран. И снова пишем "end"

0:15:44.774,0:15:48.522
И мы увидели ещё один способ найти все четные числа между 2 и 10.

0:15:48.522,0:15:51.246
есть ещё пара способов использования цикла "for"

0:15:51.246,0:15:54.019
всё это считается циклами "for"

0:15:54.019,0:16:01.506
создадим массив, он хранит в себе несколько различных значений, я расскажу о массивах позже

0:16:01.506,0:16:14.837
напишем for number in numbers, в этом случае цикл будет проходить по каждому числу в нашем массиве с числами. И при каждой итерации каждое число будет временно сохранено в переменную number

0:16:14.837,0:16:25.435
теперь выведем их на экран. И если вы хотите вставить значение переменной в объект типа "string", нужно написать решетку # и две фигурные скобки вот так (см. код)

0:16:25.435,0:16:28.306
так же напишем запятую и пробел

0:16:28.306,0:16:30.591
все это так же заканчиваем словом "end"

0:16:30.591,0:16:33.895
и вы можете видеть, мы прошли циклом по массиву и имеем запятую после каждого значения на экране.

0:16:33.895,0:16:38.726
теперь поменяем puts на print, и вы можете видеть, теперь у нас нет перехода на новую строку.

0:16:38.726,0:16:45.444
Давайте создадим массив groceries (продукты), что-бы показать, что вы можете проходить циклом почти по всему.

0:16:45.444,0:16:52.499
Скажем у нас есть бананы, сладкая картошка, макароны и помидоры. Это наш массив с продуктами.

0:16:52.499,0:16:58.330
Мы будем перебирать в цикле все продукты. Напишем groceries.each (each - каждый).  Напишем food между двух вертикальных линий.

0:16:58.330,0:17:04.793
И в этом случае в "food" будет временно храниться каждый из элементов цикла, с которым мы работаем на конкретной итерации.

0:17:04.793,0:17:11.957
Выведем все значения на экран. Напишем "Возми немного #{food}" (мы так же вставили переменную в строку путем #{}, это называется интерполяция) 

0:17:11.957,0:17:14.314
И заканчиваем это словом "end".

0:17:14.314,0:17:19.310
Все как мы и хотели показалось на экране.

0:17:19.310,0:17:29.592
Мы так же можем перебирать числа. Это очень просто. Например мы хотим перебрать числа от 0 до 5. (0..5) - это называется диапазон (ряд), мы рассмотрим их чуть позже.

0:17:29.592,0:17:44.682
Теперь напишем так же .each do снова значение между знаков пайп - " | ", ниже выведем строку в которую напишем нашу переменную. Напишем ещё одну решетку, которая будет выглядеть на выходе как решетка.

0:17:44.682,0:17:47.065
И снова заканчиваем все словом "end".

0:17:47.065,0:17:49.363
исполним, и вы можете видеть, все числа появились.

